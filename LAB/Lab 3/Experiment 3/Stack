#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX 100

// --------- Char Stack (for operators) ---------
struct CharStack {
    int top;
    char arr[MAX];
};

void initCharStack(struct CharStack *s) {
    s->top = -1;
}
int isCharEmpty(struct CharStack *s) {
    return (s->top == -1);
}
void pushChar(struct CharStack *s, char c) {
    s->arr[++s->top] = c;
}
char popChar(struct CharStack *s) {
    return s->arr[s->top--];
}
char peekChar(struct CharStack *s) {
    return s->arr[s->top];
}

// --------- Int Stack (for evaluation) ---------
struct IntStack {
    int top;
    int arr[MAX];
};

void initIntStack(struct IntStack *s) {
    s->top = -1;
}
void pushInt(struct IntStack *s, int val) {
    s->arr[++s->top] = val;
}
int popInt(struct IntStack *s) {
    return s->arr[s->top--];
}

// --------- Helpers ---------
int precedence(char op) {
    if (op == '^') return 3;
    else if (op == '*' || op == '/') return 2;
    else if (op == '+' || op == '-') return 1;
    else return 0;
}
int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}

// --------- Infix to Postfix ---------
void infixToPostfix(char infix[], char postfix[]) {
    struct CharStack stack;
    initCharStack(&stack);
    int i, k = 0;
    char ch;

    for (i = 0; infix[i] != '\0'; i++) {
        ch = infix[i];

        if (isalnum(ch)) {   // Operand (variable or digit)
            postfix[k++] = ch;
        }
        else if (ch == '(') {
            pushChar(&stack, ch);
        }
        else if (ch == ')') {
            while (!isCharEmpty(&stack) && peekChar(&stack) != '(') {
                postfix[k++] = popChar(&stack);
            }
            popChar(&stack); // pop '('
        }
        else if (isOperator(ch)) {
            while (!isCharEmpty(&stack) && precedence(peekChar(&stack)) >= precedence(ch)) {
                postfix[k++] = popChar(&stack);
            }
            pushChar(&stack, ch);
        }
    }

    while (!isCharEmpty(&stack)) {
        postfix[k++] = popChar(&stack);
    }
    postfix[k] = '\0';
}

// --------- Postfix Evaluation (after asking values) ---------
int evaluatePostfix(char postfix[]) {
    struct IntStack stack;
    initIntStack(&stack);
    int values[256] = {0};      // ASCII indexed
    int assigned[256] = {0};    // Track assigned variables

    for (int i = 0; postfix[i] != '\0'; i++) {
        char ch = postfix[i];

        if (isdigit(ch)) {
            pushInt(&stack, ch - '0'); // convert char â†’ int
        }
        else if (isalpha(ch)) {
            if (!assigned[(int)ch]) {
                printf("Enter value for %c: ", ch);
                scanf("%d", &values[(int)ch]);
                assigned[(int)ch] = 1;
            }
            pushInt(&stack, values[(int)ch]);
        }
        else if (isOperator(ch)) {
            int op2 = popInt(&stack);
            int op1 = popInt(&stack);
            switch (ch) {
                case '+': pushInt(&stack, op1 + op2); break;
                case '-': pushInt(&stack, op1 - op2); break;
                case '*': pushInt(&stack, op1 * op2); break;
                case '/': pushInt(&stack, op1 / op2); break;
                case '^': {
                    int res = 1;
                    for (int j = 0; j < op2; j++) res *= op1;
                    pushInt(&stack, res);
                    break;
                }
            }
        }
    }
    return popInt(&stack);
}

// --------- Main ---------
int main() {
    char infix[MAX], postfix[MAX];

    printf("Enter an infix expression (variables allowed): ");
    scanf("%s", infix);

    infixToPostfix(infix, postfix);
    printf("Postfix Expression: %s\n", postfix);

    int result = evaluatePostfix(postfix);
    printf("Evaluation Result: %d\n", result);

    return 0;
}
