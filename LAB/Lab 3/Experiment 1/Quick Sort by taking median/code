#include <stdio.h>
#include <stdlib.h>

// ---------- Swap ----------
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// ---------- Median-of-Three Pivot ----------
int medianOfThree(int arr[], int low, int high) {
    int mid = (low + high) / 2;

    if (arr[low] > arr[mid]) swap(&arr[low], &arr[mid]);
    if (arr[low] > arr[high]) swap(&arr[low], &arr[high]);
    if (arr[mid] > arr[high]) swap(&arr[mid], &arr[high]);

    // Place pivot at high-1
    swap(&arr[mid], &arr[high-1]);
    return arr[high-1];
}

// ---------- Partition ----------
int partition(int arr[], int low, int high) {
    int pivot = medianOfThree(arr, low, high);
    int i = low;
    int j = high - 1;

    while (1) {
        while (arr[++i] < pivot);
        while (arr[--j] > pivot);
        if (i < j) swap(&arr[i], &arr[j]);
        else break;
    }
    swap(&arr[i], &arr[high-1]);  // restore pivot
    return i;
}

// ---------- Quick Sort ----------
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        if (high - low + 1 <= 3) {
            // For very small partitions, do manual sort
            for (int i = low; i <= high; i++) {
                for (int j = i+1; j <= high; j++) {
                    if (arr[i] > arr[j]) swap(&arr[i], &arr[j]);
                }
            }
        } else {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }
}

// ---------- Print ----------
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) printf("%d ", arr[i]);
    printf("\n");
}

// ---------- Main ----------
int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d integers: ", n);
    for (int i = 0; i < n; i++) scanf("%d", &arr[i]);

    quickSort(arr, 0, n-1);

    printf("Sorted array using Quick Sort (median-of-three pivot):\n");
    printArray(arr, n);

    return 0;
}
