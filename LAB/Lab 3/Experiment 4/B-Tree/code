#include <stdio.h>
#include <stdlib.h>

#define T 3 // Minimum degree (defines max keys = 2*T - 1)

// -------- B-Tree Node Structure --------
struct BTreeNode {
    int keys[2*T - 1];
    struct BTreeNode *children[2*T];
    int n;          // Current number of keys
    int leaf;       // 1 if leaf node, 0 otherwise
};

// -------- Create a new node --------
struct BTreeNode* createNode(int leaf) {
    struct BTreeNode* node = (struct BTreeNode*)malloc(sizeof(struct BTreeNode));
    node->leaf = leaf;
    node->n = 0;
    for (int i = 0; i < 2*T; i++)
        node->children[i] = NULL;
    return node;
}

// -------- Split child --------
void splitChild(struct BTreeNode* parent, int i, struct BTreeNode* y) {
    struct BTreeNode* z = createNode(y->leaf);
    z->n = T - 1;

    // Copy last T-1 keys of y to z
    for (int j = 0; j < T-1; j++)
        z->keys[j] = y->keys[j+T];

    // Copy child pointers
    if (!y->leaf) {
        for (int j = 0; j < T; j++)
            z->children[j] = y->children[j+T];
    }

    y->n = T - 1;

    for (int j = parent->n; j >= i+1; j--)
        parent->children[j+1] = parent->children[j];

    parent->children[i+1] = z;

    for (int j = parent->n - 1; j >= i; j--)
        parent->keys[j+1] = parent->keys[j];

    parent->keys[i] = y->keys[T-1];
    parent->n += 1;
}

// -------- Insert Non-Full --------
void insertNonFull(struct BTreeNode* node, int key) {
    int i = node->n - 1;

    if (node->leaf) {
        while (i >= 0 && node->keys[i] > key) {
            node->keys[i+1] = node->keys[i];
            i--;
        }
        node->keys[i+1] = key;
        node->n += 1;
    } else {
        while (i >= 0 && node->keys[i] > key)
            i--;
        i++;
        if (node->children[i]->n == 2*T - 1) {
            splitChild(node, i, node->children[i]);
            if (key > node->keys[i])
                i++;
        }
        insertNonFull(node->children[i], key);
    }
}

// -------- Insert --------
struct BTreeNode* insert(struct BTreeNode* root, int key) {
    if (root == NULL) {
        root = createNode(1);
        root->keys[0] = key;
        root->n = 1;
    } else {
        if (root->n == 2*T - 1) {
            struct BTreeNode* s = createNode(0);
            s->children[0] = root;
            splitChild(s, 0, root);

            int i = 0;
            if (s->keys[0] < key)
                i++;
            insertNonFull(s->children[i], key);

            root = s;
        } else {
            insertNonFull(root, key);
        }
    }
    return root;
}

// -------- Find key index in node --------
int findKey(struct BTreeNode* node, int key) {
    int idx = 0;
    while (idx < node->n && node->keys[idx] < key)
        ++idx;
    return idx;
}

// -------- Remove key from node --------
void removeFromNode(struct BTreeNode* node, int key);

// -------- Merge, Borrow functions --------
// For brevity, deletion is complicated in B-Trees; a simple version can remove keys only from leaf nodes
void removeFromLeaf(struct BTreeNode* node, int idx) {
    for (int i = idx+1; i < node->n; ++i)
        node->keys[i-1] = node->keys[i];
    node->n--;
}

void removeFromNode(struct BTreeNode* node, int key) {
    int idx = findKey(node, key);

    if (idx < node->n && node->keys[idx] == key) {
        if (node->leaf) {
            removeFromLeaf(node, idx);
            printf("Deleted key %d\n", key);
        } else {
            printf("Deletion from internal nodes not implemented in this basic version.\n");
        }
    } else {
        if (node->leaf) {
            printf("Key %d not found in tree.\n", key);
            return;
        }
        removeFromNode(node->children[idx], key);
    }
}

// -------- Print B-Tree --------
void printBTree(struct BTreeNode* root, int level) {
    if (root) {
        printf("Level %d: ", level);
        for (int i = 0; i < root->n; i++)
            printf("%d ", root->keys[i]);
        printf("\n");
        if (!root->leaf) {
            for (int i = 0; i <= root->n; i++)
                printBTree(root->children[i], level+1);
        }
    }
}

// -------- Main --------
int main() {
    struct BTreeNode* root = NULL;
    int choice, value;

    while (1) {
        printf("\nB-Tree Operations:\n");
        printf("1. Insert\n");
        printf("2. Delete (only leaf keys)\n");
        printf("3. Print B-Tree\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                printf("Enter key to insert: ");
                scanf("%d", &value);
                root = insert(root, value);
                break;
            case 2:
                printf("Enter key to delete: ");
                scanf("%d", &value);
                if (root)
                    removeFromNode(root, value);
                else
                    printf("Tree is empty.\n");
                break;
            case 3:
                printf("B-Tree structure:\n");
                printBTree(root, 0);
                break;
            case 4:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
