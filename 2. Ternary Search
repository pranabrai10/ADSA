#include <stdio.h>

// Global counters
int comparisonsBinary = 0;
int comparisonsTernary = 0;

// Binary Search
int binarySearch(int arr[], int n, int key) {
    int l = 0, r = n - 1;
    while (l <= r) {
        int mid = l + (r - l) / 2;
        comparisonsBinary++; // compare with arr[mid]

        if (arr[mid] == key) return mid;
        if (arr[mid] < key)
            l = mid + 1;
        else
            r = mid - 1;
    }
    return -1;
}

// Ternary Search (recursive)
int ternarySearch(int arr[], int l, int r, int key) {
    if (l <= r) {
        int mid1 = l + (r - l) / 3;
        int mid2 = r - (r - l) / 3;

        comparisonsTernary++; // compare with arr[mid1]
        if (arr[mid1] == key) return mid1;

        comparisonsTernary++; // compare with arr[mid2]
        if (arr[mid2] == key) return mid2;

        if (key < arr[mid1])
            return ternarySearch(arr, l, mid1 - 1, key);
        else if (key > arr[mid2])
            return ternarySearch(arr, mid2 + 1, r, key);
        else
            return ternarySearch(arr, mid1 + 1, mid2 - 1, key);
    }
    return -1;
}

int main() {
    FILE *fp = fopen("output.dat", "w");
    if (!fp) {
        printf("Error opening file!\n");
        return 1;
    }

    // Run for increasing n
    for (int n = 10; n <= 100000; n *= 10) {
        int arr[n];
        for (int i = 0; i < n; i++) arr[i] = i + 1; // sorted array

        int key = n; // worst case (last element)

        comparisonsBinary = 0;
        comparisonsTernary = 0;

        binarySearch(arr, n, key);
        ternarySearch(arr, 0, n - 1, key);

        fprintf(fp, "%d %d %d\n", n, comparisonsBinary, comparisonsTernary);
        printf("n=%d -> Binary=%d, Ternary=%d\n", n, comparisonsBinary, comparisonsTernary);
    }

    fclose(fp);
    return 0;
}
